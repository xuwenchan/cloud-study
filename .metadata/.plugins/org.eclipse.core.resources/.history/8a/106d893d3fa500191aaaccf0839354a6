package NetNioTest;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

public class UDPServer {

	public static void main(String[] args) {
		
	}
	
	public static void server() {
		try {
			//创建一个服务器
			ServerSocketChannel serverChannel=ServerSocketChannel.open();
			//设置为非阻塞模式
			serverChannel.configureBlocking(false);
			//设置绑定的端口号
			serverChannel.bind(new InetSocketAddress(9898));
			//创建一个选择器
			Selector selector =Selector.open();
			serverChannel.register(selector, SelectionKey.OP_ACCEPT);
			while(selector.select()>0) {
				Iterator<SelectionKey> it=selector.selectedKeys().iterator();
				while(it.hasNext()) {
					//获取准备就绪的事件
					SelectionKey sk=it.next();
					if(sk.isAcceptable()) {//测试此密钥的通道是否已准备好接受新的套接字连接
						SocketChannel sChannel=serverChannel.accept();
						//设置为非阻塞模式
						sChannel.configureBlocking(false);
						//将通道注册到选择器上
						sChannel.register(selector, SelectionKey.OP_READ);
						
					}
					
					
				}
				
				
			}
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
	}
}
