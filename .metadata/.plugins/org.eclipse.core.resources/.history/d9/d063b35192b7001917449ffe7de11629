package zookeeper;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.Watcher.Event.EventType;
import org.apache.zookeeper.Watcher.Event.KeeperState;
import org.apache.zookeeper.ZooKeeper;

public class ZookeeperWatcher implements Watcher{

	/**
	 * 定义原子变量
	 */
	
	private AtomicInteger seq=new AtomicInteger();
	/**
	 * 定义session失效时间
	 */
	private static final int SESSION_TIMEOUT=10000;
	/**
	 * zookeeper服务器地址
	 */
	
	private static final String CONNECTION_ADDR="192.168.75.128:2181";
	/**
	 * zookeeper路径设置
	 */
	private static final String PARENT_PATH="/p";
	/**
	 * zookeeper子路径设置
	 */
	private static final String CHILDREN_PATH="/p/c";
	/**
	 * 进入标识
	 */
	private static final String LOG_PREFIX_OF_MAIN="[MAIN]";
	/**
	 * zookeeper变量
	 */
	private ZooKeeper zk=null;
	/**
	 * 用于等待zookeeper连接建立之后通知阻塞程序继续向下执行
	 */
	private CountDownLatch connectedSemaphore =new CountDownLatch(1); 
	/**
	 * 创建zk连接
	 */
	
	public void createConnection(String connectAddr,int sessionTimeout) {
		this.releaseConnection();
		try {
			zk=new ZooKeeper(connectAddr,sessionTimeout,this);
			System.out.println(LOG_PREFIX_OF_MAIN+"开始连接zk服务器");
			connectedSemaphore.await();
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private void releaseConnection() {
		if(this.zk!=null) {
			try {
				this.zk.close();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}


	public void process(WatchedEvent event) {
		System.out.println("进入process。。。。。。。。。event="+event);
		try {
			Thread.sleep(200);
		}catch(Exception e) {
			e.printStackTrace();
		}
		if(event==null) {
			return ;
		}
		//连接状态
		
		KeeperState keeperState=event.getState();
		//事件类型
		EventType eventType=event.getType();
		//原子对象seq 记录进入process的次数
		String logPrefix="【Watcher-】+"+this.seq.incrementAndGet();
		System.out.println(logPrefix+"收到Watcher通知");
		System.out.println(logPrefix+"连接状态:\t"+keeperState.toString());
		System.out.println(logPrefix+"事件状态:\t"+eventType.toString());
		if(KeeperState.SyncConnected==keeperState) {
			//成功连接上zk服务器
			if(EventType.None==eventType) {
				System.out.println(logPrefix+"成功连接上zk服务器");
				//程序继续向下执行
				connectedSemaphore.countDown();
			}
			
			//创建节点
			else if(EventType.NodeCreated==eventType) {
				System.out.println(logPrefix+"节点创建");
				try {
					Thread.sleep(100);
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	
	public static void main(String[] args) throws Exception {
		ZookeeperWatcher zkWatch=new ZookeeperWatcher();
		
		zkWatch.createConnection(CONNECTION_ADDR, SESSION_TIMEOUT);
		Thread.sleep(1000);
		
		//清理节点
		zkWatch.deleteAllTestPath(false);
		
		//
		if(zkWatch.createPath() )
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

	private void deleteAllTestPath(boolean b) {
		// TODO Auto-generated method stub
		
	}
	

	
	
}
